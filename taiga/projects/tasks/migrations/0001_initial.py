# -*- coding: utf-8 -*-
# Generated by Django 1.11.2 on 2018-08-21 19:39
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import taiga.base.utils.time
import taiga.projects.notifications.mixins


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('projects', '0002_auto_20180821_2239'),
        ('milestones', '0002_auto_20180821_2239'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('userstories', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.IntegerField(default=1, verbose_name='version')),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=[], null=True, size=None, verbose_name='tags')),
                ('is_blocked', models.BooleanField(default=False, verbose_name='is blocked')),
                ('blocked_note', models.TextField(blank=True, default='', verbose_name='blocked note')),
                ('due_date', models.DateField(blank=True, default=None, null=True, verbose_name='due date')),
                ('due_date_reason', models.TextField(blank=True, default='', verbose_name='reason for the due date')),
                ('ref', models.BigIntegerField(blank=True, db_index=True, default=None, null=True, verbose_name='ref')),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='created date')),
                ('modified_date', models.DateTimeField(verbose_name='modified date')),
                ('finished_date', models.DateTimeField(blank=True, null=True, verbose_name='finished date')),
                ('subject', models.TextField(verbose_name='subject')),
                ('us_order', models.BigIntegerField(default=taiga.base.utils.time.timestamp_ms, verbose_name='us order')),
                ('taskboard_order', models.BigIntegerField(default=taiga.base.utils.time.timestamp_ms, verbose_name='taskboard order')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('is_iocaine', models.BooleanField(default=False, verbose_name='is iocaine')),
                ('external_reference', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=None, null=True, size=None, verbose_name='external reference')),
                ('assigned_to', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tasks_assigned_to_me', to=settings.AUTH_USER_MODEL, verbose_name='assigned to')),
                ('milestone', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tasks', to='milestones.Milestone', verbose_name='milestone')),
                ('owner', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='owned_tasks', to=settings.AUTH_USER_MODEL, verbose_name='owner')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='projects.Project', verbose_name='project')),
                ('status', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='projects.TaskStatus', verbose_name='status')),
                ('user_story', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='userstories.UserStory', verbose_name='user story')),
            ],
            options={
                'verbose_name': 'task',
                'verbose_name_plural': 'tasks',
                'ordering': ['project', 'created_date', 'ref'],
                'permissions': (('view_task', 'Can view task'),),
            },
            bases=(taiga.projects.notifications.mixins.WatchedModelMixin, models.Model),
        ),
    ]
